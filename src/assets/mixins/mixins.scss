
$baseSize: 16px;
$baseFontSize: $baseSize / ($baseSize * 0 + 1);

/**
 * usage: @include pxToRem(font-size, 14);
 * unit: px
 */
@mixin pxToRem($property, $values...) {
  $pxValues: '';
  $remValues: '';

  @each $value in $values {
    $pxValues: #{$pxValues + ' ' + $value}px;
    $remValues: #{$remValues + ' ' + $value / $baseFontSize}rem;
  }
  #{$property}: $pxValues;
  #{$property}: $remValues;
}

/**
 * Convert font-size from px to rem with px fallback
 * @param $size - the value in pixel you want to convert
 * e.g. p {@include fontSize(12);}
 */
@mixin fontSize($size) {
  font-size: $size / $baseFontSize * 1rem
}

/**
 * parameters: v = vertical, h = horizontal, both = v + h
 * usage: @include center(both);
 */
@mixin center($position) {
  position: absolute;

  @if $position == 'v' {
    top: 50%;
    transform: translateY(-50%);
  }
  @else if $position == 'h' {
    left: 50%;
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin flexCenter() {
  display: flex;
  align-items: center;
  justify-content: center;
}

/**
 * Usage:
 * $start-color, $end-color, $orientation - vertical/horizontal/radial
 * parameters: v = vertical, h = horizontal
 *
 * .foo {
 *   @include background-gradient(red, black, 'v');
 *  }
 *
 *  Output:
 *  .foo {
 *    background: -webkit-linear-gradient(top, red, black);
 *    background: linear-gradient(to bottom, red, black);
 *  }
 */
@mixin backgroundGradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'v' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'h' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin hoverLink($linkColor, $hoverColor) {
  @include cursorPointer;
  color: $linkColor;

  &:hover {
    color: $hoverColor;
    text-decoration: none;
  }
}

@mixin font12 {
  @include fontSize(12);
  @include pxToRem(line-height, 15);
}

@mixin font13 {
  @include fontSize(13);
  @include pxToRem(line-height, 16);
}

@mixin font14 {
  @include fontSize(14);
  @include pxToRem(line-height, 18);
}

@mixin font15 {
  @include fontSize(15);
  @include pxToRem(line-height, 20);
}

@mixin font16 {
  @include fontSize(16);
  @include pxToRem(line-height, 22);
}

@mixin font17 {
  @include fontSize(17);
  @include pxToRem(line-height, 24);
}

@mixin font18 {
  @include fontSize(18);
  @include pxToRem(line-height, 26);
}

@mixin font19 {
  @include fontSize(19);
  @include pxToRem(line-height, 28);
}

@mixin font20 {
  @include fontSize(20);
  @include pxToRem(line-height, 30);
}

@mixin font22 {
  @include fontSize(22);
  @include pxToRem(line-height, 32);
}

@mixin font23 {
  @include fontSize(23);
  @include pxToRem(line-height, 34);
}

@mixin font24 {
  @include fontSize(24);
  @include pxToRem(line-height, 36);
}

@mixin font26 {
  @include fontSize(26);
  @include pxToRem(line-height, 38);
}

@mixin font30 {
  @include fontSize(30);
  @include pxToRem(line-height, 44);
}

@mixin font34 {
  @include fontSize(34);
  @include pxToRem(line-height, 50);
}

@mixin font40 {
  @include fontSize(40);
  @include pxToRem(line-height, 60);
}

@mixin font43 {
  @include fontSize(43);
  @include pxToRem(line-height, 64);
}

@mixin cursorPointer {
  // 游標變成 pointer
  cursor: pointer;

  // 點兩下不要被選字
  user-select: none;
}

@mixin notoSansFont($weight) {
  font-family: 'Noto Sans TC';
  font-style: normal;
  font-weight: $weight;
}

@mixin notoSerifFont($weight) {
  font-family: 'Noto Serif TC';
  font-style: normal;
  font-weight: $weight;
}
